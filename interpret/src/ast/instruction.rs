use super::indices::*;
use super::types::*;

#[derive(Debug)]
pub enum Instruction {
    // Control
    Unreachable,
    Nop,

    Block {
        result: ResultType,
        instructions: Vec<Instruction>,
    },

    Loop {
        result: ResultType,
        instructions: Vec<Instruction>,
    },

    Conditional {
        result: ResultType,
        success: Vec<Instruction>,
        failure: Vec<Instruction>,
    },

    Branch(LabelIndex),
    BranchConditional(LabelIndex),
    BranchTable {
        targets: Vec<LabelIndex>,
        default: LabelIndex,
    },

    Return,
    Call(FunctionIndex),
    CallIndirect(TypeIndex),

    // Parametric
    Drop,
    Select,

    // Variable
    LocalGet(LocalIndex),
    LocalSet(LocalIndex),
    LocalTee(LocalIndex),
    GlobalGet(GlobalIndex),
    GlobalSet(GlobalIndex),

    // Memory
    I32Load(MemoryArgument),
    I64Load(MemoryArgument),
    F32Load(MemoryArgument),
    F64Load(MemoryArgument),
    I32Load8Signed(MemoryArgument),
    I32Load8Unsigned(MemoryArgument),
    I32Load16Signed(MemoryArgument),
    I32Load16Unsigned(MemoryArgument),
    I64Load8Signed(MemoryArgument),
    I64Load8Unsigned(MemoryArgument),
    I64Load16Signed(MemoryArgument),
    I64Load16Unsigned(MemoryArgument),
    I64Load32Signed(MemoryArgument),
    I64Load32Unsigned(MemoryArgument),
    I32Store(MemoryArgument),
    I64Store(MemoryArgument),
    F32Store(MemoryArgument),
    F64Store(MemoryArgument),
    I32Store8(MemoryArgument),
    I32Store16(MemoryArgument),
    I64Store8(MemoryArgument),
    I64Store16(MemoryArgument),
    I64Store32(MemoryArgument),
    MemorySize,
    MemoryGrow,

    // Numeric
    I32Const(i32),
    I64Const(i64),
    F32Const(f32),
    F64Const(f64),

    I32EqualZero,
    I32Equal,
    I32NotEqual,
    I32LessThanSigned,
    I32LessThanUnsigned,
    I32GreaterThanSigned,
    I32GreaterThanUnsigned,
    I32LessEqualSigned,
    I32LessEqualUnsigned,
    I32GreaterEqualSigned,
    I32GreaterEqualUnsigned,

    I64EqualZero,
    I64Equal,
    I64NotEqual,
    I64LessThanSigned,
    I64LessThanUnsigned,
    I64GreaterThanSigned,
    I64GreaterThanUnsigned,
    I64LessEqualSigned,
    I64LessEqualUnsigned,
    I64GreaterEqualSigned,
    I64GreaterEqualUnsigned,

    F32Equal,
    F32NotEqual,
    F32LessThan,
    F32GreaterThan,
    F32LessEqual,
    F32GreaterEqual,

    F64Equal,
    F64NotEqual,
    F64LessThan,
    F64GreaterThan,
    F64LessEqual,
    F64GreaterEqual,

    I32LeadingZeros,
    I32TrailingZeros,
    I32CountOnes,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivSigned,
    I32DivUnsigned,
    I32RemainderSigned,
    I32RemainderUnsigned,
    I32And,
    I32Or,
    I32Xor,
    I32ShiftLeft,
    I32ShiftRightSigned,
    I32ShiftRightUnsigned,
    I32RotateLeft,
    I32RotateRight,

    I64LeadingZeros,
    I64TrailingZeros,
    I64CountOnes,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivSigned,
    I64DivUnsigned,
    I64RemainderSigned,
    I64RemainderUnsigned,
    I64And,
    I64Or,
    I64Xor,
    I64ShiftLeft,
    I64ShiftRightSigned,
    I64ShiftRightUnsigned,
    I64RotateLeft,
    I64RotateRight,

    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32Copysign,

    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64Copysign,

    I32WrapI64,
    I32TruncF32Signed,
    I32TruncF32Unsigned,
    I32TruncF64Signed,
    I32TruncF64Unsigned,
    I64ExtendI32Signed,
    I64ExtendI32Unsigned,
    I64TruncF32Signed,
    I64TruncF32Unsigned,
    I64TruncF64Signed,
    I64TruncF64Unsigned,
    F32ConvertI32Signed,
    F32ConvertI32Unsigned,
    F32ConvertI64Signed,
    F32ConvertI64Unsigned,
    F32DemoteF64,
    F64ConvertI32Signed,
    F64ConvertI32Unsigned,
    F64ConvertI64Signed,
    F64ConvertI64Unsigned,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
}

#[derive(Debug, Copy, Clone)]
pub struct MemoryArgument {
    pub align: u32,
    pub offset: u32,
}
